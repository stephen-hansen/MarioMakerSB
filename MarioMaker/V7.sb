' MANDATORY FIRST SETUP VARIABLES
fpath = Program.Directory + "\"
' PRE-DEFINED VARIABLES '
maxw = 240
maxh = 28
gridsize = 32
scroll = 4
menusize = (gridsize*100)/32
screenextra = menusize * 2

drag = 0
throwx = 0
throwy = 0
prevposx = 0
prevposy = 0
deltax = 0
deltay = 0

camUp = 0
camDown = 0
camLeft = 0 
camRight = 0

playerUp = 0
playerDown = 0
playerLeft = 0 
playerRight = 0

mode = "build"

' GRAPHICSWINDOW SET-UP ' 
width = Math.Round(maxw/10) * gridsize
height = Math.Round(maxh/2) * gridsize
GraphicsWindow.Width = width
GraphicsWindow.Height = height
GraphicsWindow.PenWidth = 0
GraphicsWindow.BackgroundColor = "SkyBlue"

' DEFINE TILES '
For i = 1 To maxh-1
  For k = 1 To maxw
    tile[i][k] = "blank"
  EndFor
EndFor
For k = 1 To maxw/2
  tile[maxh][k] = "hardblock"
  block[1][k] = Shapes.AddImage(fpath + "hardblock.png")
  blockx[1][k] = menusize + (k-1)*gridsize
  blocky[1][k] = menusize + (maxh - 1)*gridsize 
  Shapes.Move(block[1][k], menusize + (k-1)*gridsize, menusize + (maxh/2 - 1)*gridsize)
EndFor
For j = maxw/2 + 1 to maxw
  tile[maxh][j] = "blank"
EndFor

' DESIGN MODE SET-UP '
GraphicsWindow.Width = width + screenextra
GraphicsWindow.Height = height + screenextra
For i = 0 To maxw
  GraphicsWindow.BrushColor = "White"
  If Math.Round((i*gridsize)/width) = (i*gridsize)/width Then 
    GraphicsWindow.BrushColor = "Gold"
  EndIf  
  line[1][i] = Shapes.AddRectangle(1,maxh*gridsize)
  linex[1][i] = i*gridsize + menusize
  liney[1][i] = menusize
  Shapes.Move(line[1][i],linex[1][i],liney[1][i])
EndFor
For i = 0 To maxh
  GraphicsWindow.BrushColor = "White"
  If Math.Round((i*gridsize)/height) = (i*gridsize)/height Then 
    GraphicsWindow.BrushColor = "Gold"
  EndIf
  line[2][i] = Shapes.AddRectangle(maxw*gridsize,1)
  linex[2][i] = menusize
  liney[2][i] = i*gridsize + menusize
  Shapes.Move(line[2][i],linex[2][i],liney[2][i])
EndFor
camx = 0
camy = (Math.Round(maxh)*gridsize)  - (Math.Round(maxh/2)*gridsize) 
wscroll = Math.Power(width,2)/(maxw*gridsize)
hscroll = Math.Power(height,2)/(maxh*gridsize)
GraphicsWindow.BrushColor = "Gray"
wscrollbar = Shapes.AddRectangle(wscroll, 10)
hscrollbar = Shapes.AddRectangle(10, hscroll)
Shapes.Move(wscrollbar, camx + menusize, height - 10 + menusize)
Shapes.Move(hscrollbar, width - 10 + menusize, camy + menusize)
player = Shapes.AddImage(fpath + "player.png")
playerX = (width+screenextra)/2 - gridsize/2
playerY = (height+screenextra)/2 - gridsize/2
Shapes.Move(player, playerX, playerY)
GraphicsWindow.BrushColor = "White"
menu = Shapes.AddImage(fpath + "borderBuild.png")
Shapes.Move(menu, 0, 0)
playBtn = Shapes.AddImage(fpath + "play.png")
Shapes.Move(playBtn, 0, height + menusize)
saveBtn = Shapes.AddImage(fpath + "save.png")
Shapes.Move(saveBtn, width + menusize, 0)

' EVENT DEFINING '
GraphicsWindow.KeyDown = KeyDownEvent
GraphicsWindow.KeyUp = KeyUpEvent
GraphicsWindow.MouseMove = MouseMoveEvent
GraphicsWindow.MouseDown = MouseDownEvent
GraphicsWindow.MouseUp = MouseUpEvent

' MAIN LOOP '

' BUILD MODE '

While mode = "build"
  Program.Delay(10)
  'Update Camera positions
  If camx + width - camLeft + camRight <= maxw * gridsize And camx - camLeft + camRight >= 0 Then
    camx = camx - camLeft + camRight
  EndIf
  If camy + height - camUp + camDown <= maxh * gridsize And camy - camUp + camDown >= 0 Then  
    camy = camy - camUp + camDown
  EndIf 
  
  'Move objects (camera)
  For i = 0 To maxw
    Shapes.Move(line[1][i], linex[1][i] - camx, liney[1][i] - camy)
  EndFor
  For i = 0 To maxh
    Shapes.Move(line[2][i], linex[2][i] - camx, liney[2][i] - camy)
  EndFor  
  For i = 1 To Array.GetItemCount(block[1])
    Shapes.Move(block[1][i], blockx[1][i] - camx, blocky[1][i] - camy)
  EndFor  
  Shapes.Move(wscrollbar, (width * camx)/(maxw*gridsize) + menusize, height - 10 + menusize)
  Shapes.Move(hscrollbar, width - 10 + menusize, (height * camy)/(maxh*gridsize) + menusize)
  
  'Update Player positions
  If drag <> 3 Then
    If playerX - playerLeft + playerRight + gridsize + throwx <= width + menusize And playerX - playerLeft + playerRight + throwx >= 0 + menusize Then
      playerX = playerX - playerLeft + playerRight + throwx
    EndIf
    If playerY - playerUp + playerDown + gridsize + throwy <= height + menusize And playerY - playerUp + playerDown + throwy >= 0 + menusize Then
      playerY = playerY - playerUp + playerDown + throwy
    EndIf
  EndIf
  
  If playerX + throwx <= 0 + menusize Or playerX + gridsize + throwx >= width + menusize Then
    throwx = -throwx 
  EndIf 
  If playerY + throwy <= 0 + menusize Or playerY + gridsize + throwy >= height + menusize Then
    throwy = -throwy
  EndIf
  
  If throwx > 0 Then
    throwx = throwx - 0.1
  EndIf  
  If throwx < 0 Then
    throwx = throwx + 0.1
  EndIf
  If throwy > 0 Then
    throwy = throwy - 0.1
  EndIf  
  If throwy < 0 Then
    throwy = throwy + 0.1
  EndIf
  
  Shapes.Move(player,playerX,playerY)
EndWhile

' TEST MODE VARIABLES '
wscreens = 0
hscreens = 0
For i = 1 To maxh
  For k = 1 To maxw
    If tile[i][k] <> "blank" Then
      If Math.Ceiling(k/24) > wscreens Then
        wscreens = Math.Ceiling(k/24)
      EndIf
      If Math.Ceiling((-i/14)+2) > hscreens Then
        hscreens = Math.Ceiling((-i/14)+2)
      EndIf
    EndIf
  EndFor
EndFor

' TEST MODE SET-UP '

For i = 0 To maxw
  Shapes.Remove(line[1][i])
EndFor
For i = 0 To maxh
  Shapes.Remove(line[2][i])
EndFor
Shapes.Remove(menu)
Shapes.Remove(playBtn)
Shapes.Remove(saveBtn)
Shapes.Remove(wscrollbar)
Shapes.Remove(hscrollbar)
menu = Shapes.AddImage(fpath + "borderGame.png")
Shapes.Move(menu, 0, 0)

' TEST MODE '

playerRight = 0
playerLeft = 0

playerVx = 0
playerVy = 0
slowVx = 2
slowVy = 2
maxVy = 4
runMultiple = 1
pmeter = 0
ground = 0
groundTotal = 0
const = 0
constLimit = 0
playerScreenX = camx + (playerX-menusize)
leftBound = (width)/2 
rightBound = (wscreens-1)*(maxw/10)*gridsize+(width)/2
spriteSlot = 1
For i = 1 To 3
  anim["RunR"][i] = Shapes.AddImage(fpath + "RunR" + i + ".png")
  Shapes.Move(anim["RunR"][i],playerX,playerY)
  Shapes.HideShape(anim["RunR"][i])
EndFor

While mode = "test"
  Program.Delay(10)
  runRight()
  playerScreenX = camx + (playerX-menusize)
  groundTotal = 0
  For i = 1 To Array.GetItemCount(block[1])
    Shapes.Move(block[1][i], blockx[1][i] - camx, blocky[1][i] - camy)
    If playerY + gridsize + playerVy >= blocky[1][i] - camy And playerX <= blockx[1][i] - camx + gridsize And playerX + gridsize >= blockx[1][i] - camx And groundTotal = 0 Then
      playerVy = blocky[1][i] - camy - (playerY + gridsize)
      groundTotal = 1
    EndIf  
  EndFor
  If groundTotal <> 0 Then
    ground = 1
    constLimit = 0
  Else
    ground = 0  
    If constLimit = 0 Then
      constLimit = 1
      const = runMultiple*Math.Floor((pmeter/100) + 1)
    EndIf
  EndIf  
  If ground = 0 Then
    playerVy = playerVy + 0.25
  EndIf  
  If playerRight - playerLeft = playerVx Then
    If playerRight - playerLeft = 0 And ground = 0 Then
    Else  
      playerVx = playerRight - playerLeft
    EndIf
  ElseIf playerRight - playerLeft < playerVx Then  
    If playerRight - playerLeft = 0 And ground = 0 Then
    Else  
      playerVx = playerVx - 0.1
    EndIf
  ElseIf playerRight - playerLeft > playerVx Then
    If playerRight - playerLeft = 0 And ground = 0 Then
    Else    
      playerVx = playerVx + 0.1  
    EndIf
  EndIf  
  If playerScreenX <= rightBound And playerScreenX >= leftBound Then
    If ground = 1 Then
      camx = camx + ((playerVx)*runMultiple*Math.Floor((pmeter/100) + 1)) 
    Else  
      camx = camx + ((playerVx)*const)
    EndIf
  Else
    If ground = 1 Then
      playerX = playerX + ((playerVx)*runMultiple*Math.Floor((pmeter/100) + 1))
    Else
      playerX = playerX + ((playerVx)*const)
    EndIf
    If camx < 0 Then
      camx = 0
    EndIf  
    If camx > (wscreens-1)*gridsize*(maxw/10) Then
      camx = (wscreens-1)*gridsize*(maxw/10)
    EndIf  
  EndIf     
  If runMultiple = 1 Then
    pmeter = 0
  ElseIf runMultiple = 2 And (playerVx)*runMultiple*Math.Floor((pmeter/100) + 1) <> 0 And pmeter < 100 And playerRight - playerLeft = playerVx Then
    pmeter = pmeter + 0.5
  ElseIf pmeter > 0 And runMultiple = 2 And playerVx <> playerRight - playerLeft Then
    pmeter = pmeter - 0.5
  EndIf  
  playerY = playerVy + playerY
  Shapes.Move(player, playerX, playerY)
  For i = 1 To 3
    Shapes.Move(anim["RunR"][i], playerX, playerY)
  EndFor   
EndWhile

' SPRITE ANIM '
Sub runRight
  Shapes.HideShape(player)
  Shapes.ShowShape(anim["RunR"][Math.Ceiling((spriteSlot*runMultiple)*Math.Floor((pmeter/100) + 1)/20)])
  For i = 1 To 3
    If i <> Math.Ceiling((spriteSlot*runMultiple)*Math.Floor((pmeter/100) + 1)/20) Then
      Shapes.HideShape(anim["RunR"][i])
    EndIf  
  EndFor
  spriteSlot = spriteSlot + 1
  If spriteSlot >= 3*(20/(runMultiple*Math.Floor((pmeter/100) + 1))) Then
    spriteSlot = 1
  EndIf  
EndSub  

' EVENTS '
Sub KeyDownEvent
  If mode = "build" Then
    If GraphicsWindow.LastKey = "Left" Then
      camLeft = scroll
    EndIf
    If GraphicsWindow.LastKey = "Right" Then
      camRight = scroll
    EndIf
    If GraphicsWindow.LastKey = "Up" Then
      camUp = scroll
    EndIf
    If GraphicsWindow.LastKey = "Down" Then
      camDown = scroll
    EndIf
    
    If GraphicsWindow.LastKey = "A" Then
      playerLeft = scroll
    EndIf
    If GraphicsWindow.LastKey = "D" Then
      playerRight = scroll
    EndIf
    If GraphicsWindow.LastKey = "W" Then
      playerUp = scroll
    EndIf
    If GraphicsWindow.LastKey = "S" Then
      playerDown = scroll
    EndIf
  ElseIf mode = "test" Then
    If GraphicsWindow.LastKey = "LeftShift" Then
      runMultiple = 2
    EndIf  
    If GraphicsWindow.LastKey = "A" Or GraphicsWindow.LastKey = "Left" Then
      playerLeft = slowVx
    EndIf
    If GraphicsWindow.LastKey = "D" Or GraphicsWindow.LastKey = "Right" Then
      playerRight = slowVx
    EndIf
    If GraphicsWindow.LastKey = "Space" And ground = 1 Then 
      playerVy = -8 - Math.Floor(pmeter/100)
    EndIf  
  EndIf  
EndSub  

Sub KeyUpEvent
  If mode = "build" Then
    If GraphicsWindow.LastKey = "F5" Then
      mode = "test"
    EndIf  
    
    If GraphicsWindow.LastKey = "Left" Then
      camLeft = 0
    EndIf
    If GraphicsWindow.LastKey = "Right" Then
      camRight = 0
    EndIf
    If GraphicsWindow.LastKey = "Up" Then
      camUp = 0
    EndIf
    If GraphicsWindow.LastKey = "Down" Then
      camDown = 0
    EndIf
    
    If GraphicsWindow.LastKey = "A" Then
      playerLeft = 0
    EndIf
    If GraphicsWindow.LastKey = "D" Then
      playerRight = 0
    EndIf
    If GraphicsWindow.LastKey = "W" Then
      playerUp = 0
    EndIf
    If GraphicsWindow.LastKey = "S" Then
      playerDown = 0
    EndIf 
  ElseIf mode = "test" Then
    If GraphicsWindow.LastKey = "LeftShift" Then
      runMultiple = 1
    EndIf  
    If GraphicsWindow.LastKey = "A" Or GraphicsWindow.LastKey = "Left" Then
      playerLeft = 0
    EndIf
    If GraphicsWindow.LastKey = "D" Or GraphicsWindow.LastKey = "Right" Then
      playerRight = 0
    EndIf
    If GraphicsWindow.LastKey = "Space" Then 

    EndIf    
  EndIf  
EndSub  

Sub MouseDownEvent
  If mode = "build" Then
    If GraphicsWindow.MouseY >= height - 10 + menusize And GraphicsWindow.MouseX >= (width * camx)/(maxw*gridsize) + menusize And GraphicsWindow.MouseX <= (width * camx)/(maxw*gridsize) + Math.Power(width,2)/(maxw*gridsize) + menusize Then
      offsetx = GraphicsWindow.MouseX - ((width * camx)/(maxw*gridsize))
    EndIf
    If GraphicsWindow.MouseX >= width - 10 + menusize And GraphicsWindow.MouseY >= (height * camy)/(maxh*gridsize) + menusize And GraphicsWindow.MouseY <= (height * camy)/(maxh*gridsize) + Math.Power(height,2)/(maxh*gridsize) + menusize Then
      offsety = GraphicsWindow.MouseY - ((height * camy)/(maxh*gridsize))
    EndIf  
    If GraphicsWindow.MouseX >= playerX And GraphicsWindow.MouseX <= playerX + gridsize And GraphicsWindow.MouseY >= playerY And GraphicsWindow.MouseY <= playerY + gridsize Then
      offsetpx = GraphicsWindow.MouseX - playerX
      offsetpy = GraphicsWindow.MouseY - playerY
      deltax = 0
      deltay = 0
      prevposx = 0
      prevposy = 0 
      throwx = 0
      throwy = 0  
    EndIf 
  EndIf   
EndSub   

Sub MouseUpEvent
  If mode = "build" Then
    drag = 0
    If deltax > 3 Or deltax < -3 Then
      If deltax > 10 Or deltax <-10 Then
        throwx = (deltax/Math.Abs(deltax)) * 10
      Else
        throwx = deltax
      EndIf  
    EndIf 
    If deltay > 3 Or deltay < -3 Then
      If deltay > 10 Or deltay <-10 Then
        throwy = (deltay/Math.Abs(deltay)) * 10
      Else
        throwy = deltay
      EndIf
    EndIf 
  EndIf  
EndSub  

Sub MouseMoveEvent
  If mode = "build" Then
    If ((Mouse.IsLeftButtonDown = "True" And GraphicsWindow.MouseY > height - 10 + menusize And GraphicsWindow.MouseX > (width * camx)/(maxw*gridsize) - offsetx + menusize And GraphicsWindow.MouseX < (width * camx)/(maxw*gridsize) + Math.Power(width,2)/(maxw*gridsize) + menusize) Or drag = 1) And GraphicsWindow.MouseX - offsetx >= 0 And GraphicsWindow.MouseX + Math.Power(width,2)/(maxw*gridsize) - offsetx <= width Then
      drag = 1
      camx = ((maxw*gridsize*(GraphicsWindow.MouseX-offsetx)))/width
    EndIf
    If ((Mouse.IsLeftButtonDown = "True" And GraphicsWindow.MouseX > width - 10 + menusize And GraphicsWindow.MouseY > (height * camy)/(maxh*gridsize) - offsety + menusize And GraphicsWindow.MouseY < (height * camy)/(maxh*gridsize) + Math.Power(height,2)/(maxh*gridsize) + menusize) Or drag = 2) And GraphicsWindow.MouseY - offsety >= 0 And GraphicsWindow.MouseY + Math.Power(height,2)/(maxh*gridsize) - offsety <= height Then
      drag = 2
      camy = ((maxh*gridsize*(GraphicsWindow.MouseY-offsety)))/height
    EndIf
    If ((Mouse.IsLeftButtonDown = "True" And GraphicsWindow.MouseX >= playerX And GraphicsWindow.MouseX <= playerX + gridsize And GraphicsWindow.MouseY >= playerY And GraphicsWindow.MouseY <= playerY + gridsize) Or drag = 3) And GraphicsWindow.MouseX - offsetpx >= 0 + menusize And GraphicsWindow.MouseX + gridsize - offsetpx <= width + menusize Then
      drag = 3
      playerX = GraphicsWindow.MouseX - offsetpx
    EndIf
    If ((Mouse.IsLeftButtonDown = "True" And GraphicsWindow.MouseX >= playerX And GraphicsWindow.MouseX <= playerX + gridsize And GraphicsWindow.MouseY >= playerY And GraphicsWindow.MouseY <= playerY + gridsize) Or drag = 3) And GraphicsWindow.MouseY - offsetpy >= 0 + menusize And GraphicsWindow.MouseY + gridsize - offsetpy <= height + menusize Then
      drag = 3
      playerY = GraphicsWindow.MouseY - offsetpy
    EndIf  
    If drag = 3 Then
      deltax = GraphicsWindow.MouseX - prevposx
      deltay = GraphicsWindow.MouseY - prevposy 
      prevposx = GraphicsWindow.MouseX
      prevposy = GraphicsWindow.MouseY
    Else
      deltax = 0
      deltay = 0
      prevposx = 0
      prevposy = 0  
    EndIf  
  EndIf  
EndSub 